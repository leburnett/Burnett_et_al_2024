%% Escape Analysis
% Generated by Burnett 26/01/22

% Uses data in:
% 'Setd5_Looming_escape_data_N28.mat'
% 'Setd5_l2m_xy_returntbl.mat'

% Which contains the following files/arrays/tables:
% - ALL_XYLOOM_TABLE
% - all_xy_analysis
% - ALL_XYLOOM
% - xy_return

% Descriptions:
% - ALL_XYLOOM_TABLE and all_xy_analysis which contain ALL trials from ALL mice. 
% - ALL_XYLOOM and xy_return which contain ONLY the trials from the mice that return to shelter. 
% - ALL_XYLOOM2 and xy_return2 - are the same as above but ordered by the time to escape for each trial.

%%  This script looks at the data in several ways: 

% 1 - all trials of all mice - grouped by genotype. 
% 2 - averages of each animal - grouped by genotype. 

% 3 - Responses grouped by the number of looms to escape. (L2E)
% 4 - Response aligned to the maximum speed of the escape response. 

% XYLOOM_TABLE contains a 780 element array of the 'speed' of the animal
% during periloom period of time. 
% It covered 3s (180 frames) before the loom and 10s (600) frames after - therefore 780 in total. 


%% Key variables to initialise 

n = height(ALL_XYLOOM_TABLE); 
details = ALL_XYLOOM_TABLE(:, [1,2,3,4,6,7]);

% Rows before loom start - there are 175 frames before the loom is presented. The loom happens at frame 175 - 1 red frame shift of 5 frames. 
rowsb4 = 175;  

% fps = frames per second
fps = 60; 

% lf = loom frames - how many frames each loom lasts for
lf = 45; 

% Set the colour used in plotting the het data. 
col = 'r'; 
% col = 'm'; % CUL3
% col = [255/255 114/255 32/255]; % PTCHD1
% col = 'b'; % Emx1/Setd5

%% Sanity checks: 

% Unique animals from xy_analysis: 
% all_animals_WT = unique(all_xy_analysis.Animal(allWT));
% all_animals_HET = unique(all_xy_analysis.Animal(allHET));

% Number of WT/ HET trials in total 
% allWT = find(string(ALL_XYLOOM_TABLE.Geno) == "wt");
% allHET = find(string(ALL_XYLOOM_TABLE.Geno) == "het");

% Number of WT/ HET animals in total. 
% all_animals_WT = unique(ALL_XYLOOM_TABLE.Animal(allWT));
% all_animals_HET = unique(ALL_XYLOOM_TABLE.Animal(allHET));

% Number of WT/ HET trials where mice return, are moving when the loom
% starts and reach a maximum speed of > 20cm/s 
% allWT = find(string(all_xy_analysis.Geno) == "wt" & cell2mat(all_xy_analysis.ReturnToShelter) == 1 & cell2mat(all_xy_analysis.MaxSpEscape) >20);
% allHET = find(string(all_xy_analysis.Geno) == "het" & cell2mat(all_xy_analysis.ReturnToShelter) == 1 & cell2mat(all_xy_analysis.MaxSpEscape) >20);


%% Preprocessing to the table: Adding extra columns of information to ALL_XYLOOM_TABLE
% 1 - Add trial number - cumulative 

  all_animals = unique(ALL_XYLOOM_TABLE.Animal); 
  n_animals = numel(all_animals); 

for i = 1:n_animals
    ani = all_animals(i); 
    trial_number = 1; 
    
    for j = 1:n
        if string(ALL_XYLOOM_TABLE.Animal{j}) == ani 
            ALL_XYLOOM_TABLE.Trial(j) = trial_number; 
            trial_number = trial_number +1; 
        end   
    end
end 

%   all_animals = unique(all_xy_analysis.Animal); 
%   n_animals = numel(all_animals); 
% 
% for i = 1:n_animals
%     ani = all_animals(i); 
%     trial_number = 1; 
%     
%     for j = 1:height(all_xy_analysis)
%         if string(all_xy_analysis.Animal{j}) == ani 
%             all_xy_analysis.Trial(j) = trial_number; 
%             trial_number = trial_number +1; 
%         end   
%     end
% end 

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% 2 - Day 

 all_dates = unique(ALL_XYLOOM_TABLE.Date); 

for i = 1:n
    if string(ALL_XYLOOM_TABLE.Date(i)) == all_dates{1} 
       ALL_XYLOOM_TABLE.Day(i) = 1;
    elseif string(ALL_XYLOOM_TABLE.Date(i)) == all_dates{2} 
        ALL_XYLOOM_TABLE.Day(i) = 2;
    elseif string(ALL_XYLOOM_TABLE.Date(i)) == all_dates{3} 
        ALL_XYLOOM_TABLE.Day(i) = 3;
    elseif string(ALL_XYLOOM_TABLE.Date(i)) == all_dates{4} 
        ALL_XYLOOM_TABLE.Day(i) = 4;
    elseif string(ALL_XYLOOM_TABLE.Date(i)) == all_dates{5} 
        ALL_XYLOOM_TABLE.Day(i) = 5;
    end 
end 

% 
%  all_dates = unique(all_xy_analysis.Date); 
% 
% for i = 1:n
%     if string(all_xy_analysis.Date(i)) == all_dates{1} 
%        all_xy_analysis.Day(i) = 1;
%     elseif string(all_xy_analysis.Date(i)) == all_dates{2} 
%         all_xy_analysis.Day(i) = 2;
%     elseif string(all_xy_analysis.Date(i)) == all_dates{3} 
%         all_xy_analysis.Day(i) = 3;
%     elseif string(all_xy_analysis.Date(i)) == all_dates{4} 
%         all_xy_analysis.Day(i) = 4;
%     elseif string(all_xy_analysis.Date(i)) == all_dates{5} 
%         all_xy_analysis.Day(i) = 5;
%     end 
% end 

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% 3- Trial per day

for i = 1:n_animals
    ani = all_animals(i); 
    
    for k = 1:5 % Run through days
        day = k;
        trial_number = 1; 
            
        for j = 1:n
            if ALL_XYLOOM_TABLE.Day(j)== day && string(ALL_XYLOOM_TABLE.Animal{j}) == ani
                    ALL_XYLOOM_TABLE.TrialPerDay(j) = trial_number;
                    trial_number = trial_number +1;
            end
        end
        
    end
end

% 
% for i = 1:n_animals
%     ani = all_animals(i); 
%     
%     for k = 1:5 % Run through days
%         day = k;
%         trial_number = 1; 
%             
%         for j = 1:n
%             if all_xy_analysis.Day(j)== day && string(all_xy_analysis.Animal{j}) == ani
%                     all_xy_analysis.TrialPerDay(j) = trial_number;
%                     trial_number = trial_number +1;
%             end
%         end
%         
%     end
% end 


% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

% 4 - Number of Looms to Escape - to all_xy_analysis
%170 - not 180  - 10 frames = +0.1667.

for i = 1:height(all_xy_analysis)
    t2max = all_xy_analysis.TimeToMaxSp{i}; %+0.1667
    if t2max <= lf/60
        all_xy_analysis.Looms2Max{i} = 1; 
    elseif t2max <= (lf*2)/60
        all_xy_analysis.Looms2Max{i} = 2;
    elseif t2max <= (lf*3)/60
        all_xy_analysis.Looms2Max{i} = 3;
    elseif t2max <= (lf*4)/60
        all_xy_analysis.Looms2Max{i} = 4;
    elseif t2max <= (lf*5)/60
        all_xy_analysis.Looms2Max{i} = 5;
    elseif t2max >(lf*5)/60 && all_xy_analysis.MaxSpEscape{i}>25
        all_xy_analysis.Looms2Max{i} = 6;
    elseif t2max >(lf*5)/60 && all_xy_analysis.MaxSpEscape{i}<25 % NO RESPONSE 
        all_xy_analysis.Looms2Max{i} = 7;
    end 
end 

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% 5 - Make 'XY_RETURN' 

% Made new tables from ALL_XYLOOM_TABLE and all_xy_analysis ONLY for the
% trials where the animals returned to the shelter within the looming
% stimulus. 
% 
% allrows = find(ALL_XYLOOM_TABLE.Day ==1);
% all_xy_analysis(allrows,:) = [];
% ALL_XYLOOM_TABLE(allrows, :) = []; 

% Find the rows of the trials where the animals returned to the shelter
% within the 5 loom stimulus. 
returned = find(cell2mat(all_xy_analysis.ReturnToShelter) == 1 & cell2mat(all_xy_analysis.MaxSpEscape)>25); 

% NEW tables = ALL_XYLOOM and xy_return:
ALL_XYLOOM = ALL_XYLOOM_TABLE(returned, :); 
xy_return = all_xy_analysis(returned, :); 

n_ret = numel(xy_return(:,1));

% Incase any trials slipped through, remove trials where mouse responds >5 Looms.  
more6 = find(cell2mat(xy_return.Looms2Max) == 7);
ALL_XYLOOM(more6, :)=[];
xy_return(more6, :)=[];

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% 6  - Make L2M array 

% An array with a row for each animal and the corresponding columns give
% you the % of their trials that are within 1/2/3/4/5 looms. 

all_animals = unique(xy_return.Animal);
n_animals = numel(all_animals);

l2m_array = zeros(n_animals, 7); 

for j = 1:n_animals
    ani = all_animals{j}; 
    ani_short = ani(3:end);
    
    all_ani = (find(string(xy_return.Animal) == ani));  
    n_ani = numel(all_ani);
    n1 = numel(find(string(xy_return.Animal) == ani & cell2mat(xy_return.Looms2Max) ==1)); 
    n2 = numel(find(string(xy_return.Animal) == ani & cell2mat(xy_return.Looms2Max) ==2)); 
    n3 = numel(find(string(xy_return.Animal) == ani & cell2mat(xy_return.Looms2Max) ==3)); 
    n4 = numel(find(string(xy_return.Animal) == ani & cell2mat(xy_return.Looms2Max) ==4)); 
    n5 = numel(find(string(xy_return.Animal) == ani & cell2mat(xy_return.Looms2Max) >4)); 
    
    l2m_array(j, 1) = str2num(ani_short); 
    l2m_array(j, 2) = n1/n_ani; 
    l2m_array(j, 3) = n2/n_ani; 
    l2m_array(j, 4) = n3/n_ani; 
    l2m_array(j, 5) = n4/n_ani; 
    l2m_array(j, 6) = n5/n_ani; 
    
    if string(xy_return.Geno(all_ani(1))) == "wt"
    l2m_array(j, 7) = 1;
    elseif string(xy_return.Geno(all_ani(1))) == "het"
    l2m_array(j, 7) = 2;
    end 
   
end 

% 7 -  Stats table = all trials
% stats_table_all = make_STATS_TABLE_alltrials(all_xy_analysis);

% 8 -  Make Animal Summary table
% animal_xy_table = make_animal_summary_table(all_xy_analysis); 

% 9 - Make stats table for animal averages
% stats_table = make_STATS_TABLE_AnimalAv(animal_xy_table);

% 10 - %  Make L2M array for ALL TRIALS - to be used to make a bar chart of
% % the % of trials within each loom / no response. 
% 
all_animals = unique(all_xy_analysis.Animal);
n_animals = numel(all_animals);

l2m_array = zeros(n_animals, 8); 

for j = 1:n_animals
    ani = all_animals{j}; 
    ani_short = ani(3:end);
    
    all_ani = (find(string(all_xy_analysis.Animal) == ani));  
    n_ani = numel(all_ani);
    n1 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==1)); 
    n2 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==2)); 
    n3 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==3)); 
    n4 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==4)); 
    n5 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==5)); 
    n6 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==6)); 
    n7 = numel(find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.Looms2Max) ==7)); 
    
    l2m_array(j, 1) = str2num(ani_short); 
    l2m_array(j, 2) = n1/n_ani; 
    l2m_array(j, 3) = n2/n_ani; 
    l2m_array(j, 4) = n3/n_ani; 
    l2m_array(j, 5) = n4/n_ani; 
    l2m_array(j, 6) = n5/n_ani; 
    l2m_array(j, 7) = n6/n_ani; 
    l2m_array(j, 8) = n7/n_ani; 
    
    if string(all_xy_analysis.Geno(all_ani(1))) == "wt"
    l2m_array(j, 9) = 1;
    elseif string(all_xy_analysis.Geno(all_ani(1))) == "het"
    l2m_array(j, 9) = 2;
    end 
   
end 

% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

%% First assessment of the data based on genotype. 

% Find all the rows that correspond to WT/HET animals. 
allWT = find(string(ALL_XYLOOM_TABLE.Geno) == "wt"); 
allHET = find(string(ALL_XYLOOM_TABLE.Geno) =="het");
 
% Combine all of the 780 speed arrays for all WT/HET trials together in the
% nx780 arrays 'speed_WT' and 'speed_HET'. 

speed_WT = [];
speed_HET = []; 

for i = 1:n
    if string(ALL_XYLOOM_TABLE.Geno{i}) == "wt"  %&& ALL_XYLOOM_TABLE.Day(i) == 2
        G = cell2mat(ALL_XYLOOM_TABLE{i,5});
        speed_WT = vertcat(speed_WT, G); 
    elseif string(ALL_XYLOOM_TABLE.Geno{i}) == "het" 
        F = cell2mat(ALL_XYLOOM_TABLE{i,5});
        speed_HET = vertcat(speed_HET, F);
    end
end

% Split ALL_XYLOOM_TABLE into two tables, one for each genotype. 
% Find the number of WT/ HET animals.

WT_TABLE = ALL_XYLOOM_TABLE(allWT, :);
HET_TABLE = ALL_XYLOOM_TABLE(allHET, :);

all_animals_WT = unique(WT_TABLE.Animal);
n_animals_WT = numel(all_animals_WT);

all_animals_HET = unique(HET_TABLE.Animal);
n_animals_HET = numel(all_animals_HET);


%% SORT trials by the time to the maximum speed. 

n = height(ALL_XYLOOM); 
ALL_XYLOOM2 = sortrows(ALL_XYLOOM, 7);
xy_return2 = sortrows(xy_return, 13);

n = height(ALL_XYLOOM_TABLE); 
ALL_XYLOOM2 = sortrows(ALL_XYLOOM_TABLE, 7);
xy_return2 = sortrows(all_xy_analysis, 13);

details = ALL_XYLOOM2(:, [1,2,3,4,6,7,8,9]);

%%  PLOTS  % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

%% HEATMAP - Only return trials - SORTED by T2M - with the option to add the colourbar to the bottom. 

speed_WT = [];
speed_HET = []; 


for i = 1:n
    if ALL_XYLOOM2.T2M{i}>0.25
        if ALL_XYLOOM2.MaxSp{i} > 20
            if string(ALL_XYLOOM2.Geno{i}) == "wt"
                G = cell2mat(ALL_XYLOOM2{i,5});
                speed_WT = vertcat(speed_WT, G);
            elseif string(ALL_XYLOOM2.Geno{i}) == "het"
                F = cell2mat(ALL_XYLOOM2{i,5});
                speed_HET = vertcat(speed_HET, F);
            end
        end
    end
end


figure;
imagesc(speed_WT)
n_h = numel(speed_WT(:,1));
hold on 
plot([rowsb4 rowsb4], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf rowsb4+lf], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*2 rowsb4+lf*2], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*3 rowsb4+lf*3], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*4 rowsb4+lf*4], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*5 rowsb4+lf*5], [0 n_h+1], 'w:', 'LineWidth', 1.5)
axis off
box off
colormap(redblue)
caxis([0 80])
f = gcf; 
f.Position = [100 600 750 n_h*8];

figure;
imagesc(speed_HET)
n_h = numel(speed_HET(:,1));
hold on 
plot([rowsb4 rowsb4], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf rowsb4+lf], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*2 rowsb4+lf*2], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*3 rowsb4+lf*3], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*4 rowsb4+lf*4], [0 n_h+1], 'w:', 'LineWidth', 1.5)
plot([rowsb4+lf*5 rowsb4+lf*5], [0 n_h+1], 'w:', 'LineWidth', 1.5)
axis off
box off
colormap(redblue)
caxis([0 80])
f = gcf; 
f.Position = [100 600 750 n_h*8];

% If you want to add the colourbar, uncommment the lines below: 

% c = colorbar;
% c.Location = 'southoutside';
% c.Label.String = 'Speed (cm s^-1)';
% ax = gca;
% ax.FontSize = 18;


%% Histogram - Not Cumulative - e.g. for Reaction time - all trials where mice return to shelter. 

allWT = find(string(xy_return.Geno) =="wt");
allHET = find(string(xy_return.Geno) =="het");

columnval = 10;
rang = 0:0.25:max(cell2mat(xy_return.TimeToMaxSp)); % 0:1:25; 

dataWT = cell2mat(xy_return.TimeToMaxSp(allWT));
dataHET = cell2mat(xy_return.TimeToMaxSp(allHET));

figure
histogram(dataWT, rang, 'FaceColor', 'k', 'FaceAlpha', 0.3, 'EdgeColor', 'k')
hold on 
histogram(dataHET, rang, 'FaceColor', col, 'FaceAlpha', 0.4, 'EdgeColor', 'k')
box off
ax = gca;
ax.FontSize = 18; 
ax.TickDir = 'out';
ax.LineWidth = 1.2;
ylabel('Trials')
f = gcf;
ax.TickLength = [0.02 0.02];
f.Position = [680   821   418   277];

% % STATS % % % % % 

[p,h] = ranksum(dataWT, dataHET)
[h,p] = kstest2(dataWT, dataHET)

mean(dataWT)
mean(dataHET)


%% PIE CHART - % of 'return' trials that belong to each L2M 

% Requires the generation of array 'data2' 
% Row 1 = WT, row 2 = HET
% Each column = L2M - i.e [1,2,3,4,5]
% Therefore is the average of the mean value for each animal. 

data2 = zeros(2,7);

for k = 1:7
    allWT = find(l2m_array(:,9) == 1);
    allHET = find(l2m_array(:,9) == 2);
    
    WT_vals = l2m_array(allWT, k+1);
    HET_vals = l2m_array(allHET, k+1);
    
    data2(1, k) = mean(WT_vals); 
    data2(2, k) = mean(HET_vals); 
   
end 

expl = [1;1;1;1;1;1;1];

% SETD5 -  WT
newColor = [0 0 0; 0.32 0 0; 0.82 0 0; 0.99 0 0; 0.8 0.8 0.8];

figure
ax = gca(); 
pieData = data2(1,:); 
h1 = pie(ax, pieData, expl, {'', '', '', '', '','',''});  % '', '', '' expl,  {''}
ax.Colormap = newColor; 

% Setd5 - HET
newColor = [0 0 0; 0.32 0 0; 0.49 0 0; 0.65 0 0; 0.82 0 0; 0.99 0 0; 0.8 0.8 0.8];

figure
ax2 = gca(); 
pieData = data2(2,:); 
h = pie(ax2, pieData, expl, {'','','','','','',''}); 
ax2.Colormap = newColor; 

% For STATS on the % of trials for each animal where L2M == 1
% Set k = 1 and find WT_Vals and HET_vals above. 
% tHen run the code below: 
nanmean(WT_vals)
nanmean(HET_vals)
[p,h] = ranksum(WT_vals, HET_vals);

% For the other mouse models: 
% Ptchd1
%  newColors = [0 0 0; 0.45 0.2012 0.0565; 0.62 0.2772 0.0778; 0.79 0.3532 0.0991; 0.96 0.4292 0.1205];
% newColors = [0 0 0; 0.45 0.2012 0.0565];

 % Cul3 
% newColor = [0 0 0; 0.32 0 0.32; 0.45 0 0.45; 0.62 0 0.62; 0.79 0 0.79; 0.96 0 0.96; 0.8 0.8 0.8];
% newColorsWT = [0 0 0; 0.45 0 0.45; 0.62 0 0.62];

% 'newColors' must be the same size as the number of 'wedges' in your plot.
% Be careful to match the wedge with the coorect colour. 
% If you have all 5 colours but only 4 wedges, and the 4th wedge is L2M #5,
% this wedge will be coloured as if it is L2M #4. 


%% LINE Plot of example speed traces at each L2M 

% - Use only HET trials  - more variation in L2M
% including L2M == 6 - No Resp - plot as grey. 

% Define colours for each L2M
% newColor = [0 0 0; 0.32 0 0; 0.49 0 0; 0.65 0 0; 0.82 0 0; 0.99 0 0; 0.8
% 0.8 0.8]; % Setd5
% newColor = [0 0 0; 0.32 0 0.32; 0.45 0 0.45; 0.62 0 0.62; 0.79 0 0.79;
% 0.96 0 0.96]; % Cul3
newColor = [0 0 0; 0.45 0.25 0.05; 0.65 0.3 0.05; 0.8 0.4 0.05; 0.9 0.55 0.05; 0.95 0.8 0.05; 0.8 0.8 0.8]; % Ptchd1

offset = 0 ;

figure
% Run through the 5 L2M options.
for j = 1:7
    
    speed_VALS = [];
    
    if j == 1 || j == 2 || j == 3|| j==4 || j ==5 || j ==6 
        for i = 1:n_ret-1
            if string(xy_return.Geno{i}) == "het" && xy_return.Looms2Max{i} ==j
                F = cell2mat(ALL_XYLOOM{i,5});
                speed_VALS = vertcat(speed_VALS, F);
            end
        end
    elseif j == 7
        for i = 1:n
            if string(all_xy_analysis.Geno{i}) == "het" && all_xy_analysis.Looms2Max{i} ==7
                F = cell2mat(ALL_XYLOOM_TABLE{i,5});
                speed_VALS = vertcat(speed_VALS, F);
            end
        end
    end
    
    %Setd5
%     if j == 1
%         row = 5;
%     elseif j ==2
%         row = 19;
%     elseif j ==3
%         row = 5;
%     elseif j ==4
%         row = 3;
%     elseif j == 5
%         row = 1;
%     elseif j == 6
%         row = 10;
%     elseif j == 7
%         row = 23;
%     end

%     %Cul3
%     if j == 1
%         row = 29;
%     elseif j ==2
%         row = 28;
%     elseif j ==3
%         row = 24;
%     elseif j ==4
%         row = 1;
%     elseif j == 5
%         row = 2;
%     elseif j == 6
%         row = 1;
%     end

  % Ptchd1
    if j == 1
        row = 1;
    elseif j ==2
        row = 3;
    elseif j ==3
        row = 14;
    elseif j ==4
        row = 15;
    elseif j == 5
        row = 2;
    elseif j == 6
        row = 20;
    elseif j == 7
        row = 1; 
    end

    cl = newColor(j, :);
    mv = speed_VALS(row, :);
    
    plot(mv-offset, 'Color', cl, 'LineWidth', 1.5);
    hold on
    box off
    
    % ONLY FOR LAST L2M
    if j ==6
        plot([rowsb4 rowsb4], [-400 100], 'k:', 'LineWidth', lw)
        plot([rowsb4+lf rowsb4+lf], [-400 100], 'k:', 'LineWidth', lw)
        plot([rowsb4+lf*2 rowsb4+lf*2], [-400 100], 'k:', 'LineWidth', lw)
        plot([rowsb4+lf*3 rowsb4+lf*3], [-400 100], 'k:', 'LineWidth', lw)
        plot([rowsb4+lf*4 rowsb4+lf*4], [-400 100], 'k:', 'LineWidth', lw)
        plot([rowsb4+lf*5 rowsb4+lf*5], [-400 100], 'k:', 'LineWidth', lw)
        axis([0 780 -160 90])
        xticks([])
        ax = gca;
        ax.FontSize = 18;
        ax.TickDir = 'out';
        ax.LineWidth = 1.2;
        ax.XAxis.Visible = 'off';
        ax.YAxis.Visible = 'on';
        f = gcf;
        f.Position = [466   296   507   265];
    end
    
    % Shift next trace down. 
    offset = offset+25;
    
end

%% DOTBOX PLOT - ALL TRIALS - WT/HET - pooled

all_animals = string(unique(all_xy_analysis.Animal));

val = 13; % Which column to assess in all_xy_analysis : T2M
speed_WT = [];
speed_HET = []; 

for j = 1:numel(all_animals)
    ani = all_animals(j);
    speed_ani = [];
    
    
    for i = 1:n
        if string(all_xy_analysis.Animal{i}) == ani && all_xy_analysis.ReturnToShelter{i} == 1 %&& all_xy_analysis.speedat{i} >2 all_xy_analysis.Trial(i) <= trialval && 
            G = cell2mat(all_xy_analysis{i, val});
            speed_ani = vertcat(speed_ani, G);
            genoo = string(all_xy_analysis.Geno{i});
        end
    end
    
    if genoo == "wt"
        speed_WT = vertcat(speed_WT, nanmean(speed_ani));
    else
        speed_HET = vertcat(speed_HET, nanmean(speed_ani));
    end
end

% If you want to plot: 

%  %%%%% Combine arrays %%%% 
% speed_ALL = horzcat(speed_WT, speed_HET);
% 
% % PLOT 
% figure
% n_wt = numel(speed_WT(:,1));
% n_het = numel(speed_HET(:,1));
% 
% x1 = ones(1, n_wt);
% x2 = ones(1, n_het)*2;
% 
% scatter(x1, speed_WT,'SizeData', 200, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
% hold on 
% scatter(x2, speed_HET, 'SizeData', 200,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
% % b = boxplot(speed_ALL, 'Colors', 'k');
% b = boxplot(speed_ALL, 'Colors', 'k');
% set(b, 'linew', 1.25);
% 
% xticks([1,2])
% xticklabels({''})
% ax = gca;
% ax.FontSize = 30;
% box off
% axis([0.5 2.5 0 80])
% ax.XAxis.Visible = 'off'; 
% hold off
% ax.TickDir = 'out'; 
% % ylabel('Reaction Time (s)')
% ylabel('Max. Speed (cm s^-1)')
% ax.LineWidth = 2;
% 
% f = gcf;
% f.Position = [704   207   355   572]; 

% Just the statistics:
[p, h] = ranksum(speed_WT, speed_HET)
nanmean(speed_WT)
nanmean(speed_HET)

%% Make 'animal_xy_table' average values per animal over trials. 

all_animals = unique(all_xy_analysis.Animal);
n_animals = numel(all_animals);

xy_analysis_animals = zeros(n_animals, 7);

for j = 1:n_animals
    ani = all_animals{j};
    all_ani = find(string(all_xy_analysis.Animal) == ani & cell2mat(all_xy_analysis.MaxSpEscape)>20 & all_xy_analysis.Trial==1); %cell2mat(all_xy_analysis.ReturnToShelter)==1 % 
    
    if numel(all_ani)>0
        
        g = all_xy_analysis.Geno{all_ani(1)};
        
        if g == "wt"
            geno = 1;
        else 
            geno = 2; 
        end 
        
        % Assign animal number to  first column of table.
        xy_analysis_animals(j,1) = str2double(ani(3:end));
        xy_analysis_animals(j,2) = geno;
        xy_analysis_animals(j,3) = numel(all_ani);
        cv = 4;
        
        for k = [9, 12, 13, 17]
            all_vals = cell2mat(table2array(all_xy_analysis(all_ani, k)));
            xy_analysis_animals(j,cv) = nanmean(all_vals);
            cv = cv+1;
        end
    else
        xy_analysis_animals(j,1) = ani;
        xy_analysis_animals(j,2) = geno;
        xy_analysis_animals(j,3) = numel(all_ani);
        cv = 4;
    end
    
end

Ani = xy_analysis_animals(:,1);
Geno = xy_analysis_animals(:,2);
Return2Shelter = xy_analysis_animals(:,4);
NumTrials = xy_analysis_animals(:,3);
MaxSp = xy_analysis_animals(:,5);
T2M = xy_analysis_animals(:,6);
T2A = xy_analysis_animals(:,7);

animal_xy_table = table(Ani, Geno, Return2Shelter, NumTrials, MaxSp, T2M, T2A);


%% BOXPLOT - Values per Animal - if you have 'animal_xy_table' generated and the value you are interested in is a column in that table. 

val = 6; % Column of 'animal_xy_table' you want to assess. 

n = height(animal_xy_table);

speed_WT = [];
speed_HET = []; 

for i = 1:n
        if (animal_xy_table.Geno(i)) == 1 %"wt"
            G = (animal_xy_table{i, val});
            speed_WT = vertcat(speed_WT, G);
        elseif (animal_xy_table.Geno(i)) == 2 %"het"
            F = (animal_xy_table{i, val});
            speed_HET = vertcat(speed_HET, F);
        end
end 

% PLOT 
n_wt = numel(speed_WT);
n_het = numel(speed_HET);

x1 = ones(1, n_wt)*2;
x2 = ones(1, n_het);

geno = string(animal_xy_table.Geno); 
var = (animal_xy_table{:, val});

figure
b = boxplot(var, geno, 'Colors', 'k');
set(b , 'LineWidth', 1.5)
hold on 
scatter(x1, speed_WT','SizeData', 175, 'MarkerEdgeColor', [0.5 0.5 0.5], 'jitter', 'on', 'jitterAmount', 0.05, 'LineWidth', 1.2)
scatter(x2, speed_HET', 'SizeData', 175,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.05, 'LineWidth', 1.2)

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
ax.TickDir = 'out';
ax.TickLength = [0.02 0.02];
ax.LineWidth = 2;
ax.XAxis.Visible = 'off'; 
xlim([0.5 2.5])
% ylabel('Speed (cm s^-1)')
% ylabel('Number of Triggers')
ylim([-0.5 2.0])

f = gcf;
% f.Position = [704   207   355   572]; 
f.Position = [745   274   255   420]; 
% ylabel('Time (s)')
% ylabel('Proportion of Trials')
% ylabel('Delta Speed')
% ylabel('Acceleration cm s^-2')

% % % % STATS  % % % % % 
% Should have equal number of animals - therefore ttest not ranksum
% [p, h] = ttest(speed_WT, speed_HET)
nanmean(speed_WT)
nanmean(speed_HET)
[p, h] = ranksum(speed_WT, speed_HET)



%%  BOXPLOT of values across all trials per genotype.
% Values of individual trials are plotted on top of the box plots. 

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% WHICH TABLE TO USE DEPENDS ON WHICH TRIALS YOU ARE INTERESTED IN: 

% xy_return - only trials where the mouse escapes and returns to the
% shetler.

% all_xy_analysis - ALL trials. 

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

% Which column to assess: e.g. T2M
col_idx = 13; 

% Sort values per trial based on the genotype. 
speed_WT = [];
speed_HET = []; 

for j = 1:height(xy_return)
    
    if  string(xy_return.Geno{j}) == "wt"
        val = cell2mat(xy_return{j, col_idx});
        speed_WT = vertcat(speed_WT, val);
    else
        val = cell2mat(xy_return{j, col_idx});
        speed_HET = vertcat(speed_HET, val);
    end
end
  
 %%%%% Combine arrays %%%% 
speed_ALL = vertcat(speed_WT, speed_HET);

% Number of WT/ HET trials. 
n_wt = numel(speed_WT(:,1));
n_het = numel(speed_HET(:,1));

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

grouping_vals = vertcat(x1', x2');

% PLOT 
figure
scatter(x1, speed_WT,'SizeData', 200, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, speed_HET, 'SizeData', 200,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot(speed_ALL, grouping_vals, 'Colors', 'k');
set(b, 'linew', 1.5);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
% axis([0.5 2.5 -2.5 2.5])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ylabel('Reaction time (s)')
ax.LineWidth = 2;
ax.TickLength = [0.02 0.02]; 

f = gcf;
f.Position = [704   207   355   572]; 

% STATISTICS 

[p, h] = ranksum(speed_WT, speed_HET)

meanWT = nanmean(speed_WT)
meanHET = nanmean(speed_HET)



%% BOXPLOT of average values per animal  - comparing genotypes. 
% The average values per animal are plotted on top of the box plots. 

% How many animals: 
all_animals = string(unique(xy_return.Animal));

% Which column to assess: e.g. T2M
col_idx = 13; 

speed_WT = [];
speed_HET = []; 

for j = 1:numel(all_animals)
    
    % Which animal to assess:
    ani = all_animals(j);
    
    % All trials of that animal
    all_ani = find(xy_return.Animal == ani); 
    
    % All the values from those trials
    ani_vals = cell2mat(xy_return{all_ani, col_idx});
    
    % The average of these values
    av_ani_val = nanmean(ani_vals);
    
    % Genotype of the animal
    genoo = string(xy_return.Geno{all_ani(1)});
    
    if genoo == "wt"
        speed_WT = vertcat(speed_WT, av_ani_val);
    else
        speed_HET = vertcat(speed_HET, av_ani_val);
    end
    
end

 %%%%% Combine arrays %%%% 
speed_ALL = horzcat(speed_WT, speed_HET);

% PLOT 
figure
n_wt = numel(speed_WT(:,1));
n_het = numel(speed_HET(:,1));

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, speed_WT,'SizeData', 200, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, speed_HET, 'SizeData', 200,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot(speed_ALL, 'Colors', 'k');
set(b, 'linew', 1.5);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
% axis([0.5 2.5 -2.5 2.5])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ylabel('Reaction time (s)')
ax.LineWidth = 2;
ax.TickLength = [0.02 0.02];

f = gcf;
f.Position = [704   207   355   572]; 

% STATISTICS

[p, h] = ranksum(speed_WT, speed_HET)

meanWT = nanmean(speed_WT)
meanHET = nanmean(speed_HET)


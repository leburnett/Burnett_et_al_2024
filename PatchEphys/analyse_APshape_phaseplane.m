%% AP shape - phase plane analysis - from current injection experiments
% Generated by Burnett - 28.07.2022


%% EVOKED AP ANLYSIS - PHASE PLANE PLOTS
% Need to load the raw data - voltage - 0.02ms sampling - find the first
% sweep where APs were generated - "cut" out just the part with the APs -
% find the derivative of the mV - plot this over the votlage. 

% Need to combine this data for all cells from all animals. 

files = dir('*.abf');
nfiles = length(files);

ani = 7; 
genoo = 2; 

cohort = 2; 

%% 1 - SET THIS INFO FIRST TO ENSURE DON'T FORGET. 

celll = 3; 

%% Set the i value for the abf file to open! 
i = 21; 

%% Load the file
fn = files(i).name;
[d,si,h]=abfload(fn);
d = squeeze(d);
n = numel(d(1,:));

% d = data where each column = 1 sweep
% Can plot to see what it's like 

% Make a subplot of the first 10 sweeps to see which contains the first
% spikes! 
figure
for sweep = 1:15
subplot(15,1, sweep)
plot(d(:,sweep))
end 

% Given the subplot above select the correct sweep with the first APs! 
sw = 4; 

% "Cut out" the data that you need - most of the data is not important -
% doesn't contain APs.
data = d(12000:58250,sw);
% figure; plot(data);

%Calculate the dv/dt
dv = diff(data);

%  - Plot 
% Each point = 0.02ms 
figure; 
plot(data(1:end-1), smooth(dv/0.02), 'k')

%%  Add this data to data structures. 

curr_size = numel(phase_plane.ani);

% v
% dvdt
% Ani_Info
% Cell
% Geno

kk = curr_size+1;

phase_plane.v(kk) = {data}; 
phase_plane.dvdt(kk) = {dv/0.02}; 
phase_plane.cohort(kk) = cohort;
phase_plane.ani(kk) = ani; 
phase_plane.cell(kk) = celll;
phase_plane.geno(kk) = genoo;


%%

allWT = find(phase_plane.geno == 1);
allHET = find(phase_plane.geno == 2);

nWT = numel(allWT);
nHET = numel(allHET);

%% NEW DATA - Cut around peak 

% hw is the half width you want to cut on either side. 

hw = 2000; %was 2000

for p =1:42
    
    dd = cell2mat(phase_plane.v(p));
    dvdt = cell2mat(phase_plane.dvdt(p));
    rows = find(dd>10);
    df = diff(rows);
    pp = find(df>1);
    
    n_peaks = numel(pp)+1;
    
    dvdt_data = zeros(n_peaks, hw*2);
    v_data = zeros(n_peaks, hw*2);
    
    for k = 1:n_peaks
        
        if k == n_peaks
            xval = rows(end);
        else
           xval = rows(pp(k)); 
        end 
        
        if xval>hw && xval<46249-hw
            dvdt_data(k, :) = dvdt(xval-(hw-1):xval+hw, 1);
            v_data(k,:) = dd(xval-(hw-1):xval+hw, 1);
        elseif xval >(46250-hw)
            surplus = hw-(46250-xval);
            dvdt_data(k, :) = dvdt(xval-(hw+surplus):46249, 1);
            v_data(k,:) = dd(xval-(hw+surplus):46249, 1);
        elseif xval<hw 
            surplus = hw-xval;
            dvdt_data(k, :) = dvdt(xval-(xval-1):xval+hw+surplus, 1);
            v_data(k,:) = dd(xval-(xval-1):xval+hw+surplus, 1);
        end 
        
    end 
  
    phase_plane.dvdt_1REP(p) = {dvdt_data};
    phase_plane.v_1REP(p) = {v_data};
    
end 


%% % JUST THE FIRST SPIKE FROM THE FIRST SWEEP TO ELICIT APS

for p = 1:42
    
    dd = cell2mat(phase_plane.v(p));
    dvdt = cell2mat(phase_plane.dvdt(p));
    rows = find(dd>10);
    df = diff(rows);
    pp = find(df>1);
    
    n_peaks = numel(pp)+1;
    
    dvdt_data = zeros(1, 8000);
    v_data = zeros(1, 8000);
    
    for k = 1%:n_peaks
        
        if k == n_peaks
            xval = rows(end);
        else
           xval = rows(pp(k)); 
        end 
        
        if xval>4000 && xval<42250
            dvdt_data(k, :) = dvdt(xval-3999:xval+4000, 1);
            v_data(k,:) = dd(xval-3999:xval+4000, 1);
        elseif xval >42250
            surplus = 4000-(46250-xval);
            dvdt_data(k, :) = dvdt(xval-(4000+surplus):46249, 1);
            v_data(k,:) = dd(xval-(4000+surplus):46249, 1);
        elseif xval<4000 
            surplus = 4000-xval;
            dvdt_data(k, :) = dvdt(xval-(xval-1):xval+4000+surplus, 1);
            v_data(k,:) = dd(xval-(xval-1):xval+4000+surplus, 1);
        end 
        
    end 
  
    phase_plane.dvdt_1REPB(p) = {dvdt_data};
    phase_plane.v_1REPB(p) = {v_data};
    
end 


nWT = numel(allWT);
nHET = numel(allHET);

WTVALS = [];
WDV = [];

for kk = 1:nWT
    d = cell2mat(phase_plane.v_1REPB(allWT(kk)));
    dv = cell2mat(phase_plane.dvdt_1REPB(allWT(kk)));
    WTVALS = vertcat(WTVALS, d);
    WDV = vertcat(WDV, dv);
end 

HETVALS = [];
HDV = [];

for kk = 1:nHET
    d = cell2mat(phase_plane.v_1REPB(allHET(kk)));
    dv = cell2mat(phase_plane.dvdt_1REPB(allHET(kk)));
    HETVALS = vertcat(HETVALS, d);
    HDV = vertcat(HDV, dv);
end 

% 
figure
plot(nanmean(WTVALS), nanmean(WDV), 'k', 'LineWidth', 1.2)
hold on 
plot(nanmean(HETVALS), nanmean(HDV), 'r', 'LineWidth', 1.2)



%% JUST FIRST SPIKE PER CELL 

vWT = [];
vHET = [];

dvdtWT = [];
dvdtHET = []; 

for k = 1:nWT
    roww = allWT(k);
    ddd = cell2mat(phase_plane.v_1REP(roww));
    dm = ddd(1,:);
    vWT = vertcat(vWT, dm);
    
    dddd = cell2mat(phase_plane.dvdt_1REP(roww));
    dm2 = dddd(1,:);
    dvdtWT = vertcat(dvdtWT, dm2);
    
end 

for k = 1:nHET
    roww = allHET(k);
    ddd = cell2mat(phase_plane.v_1REP(roww));
    dm = ddd(1,:);
    vHET = vertcat(vHET, dm);
    
    dddd = cell2mat(phase_plane.dvdt_1REP(roww));
    dm2 = dddd(1,:);
    dvdtHET = vertcat(dvdtHET, dm2);
    
end 

% Phase-plane plots
figure
for i= [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,18]
% subplot(2,1,1)
plot(vWT(i,:), (dvdtWT(i,:)), 'k')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax1 = gca;
ax1.TickDir = 'out';
ax1.TickLength = [0.025 0.025];
ax1.LineWidth = 1.2;

subplot(2,1,2)
plot(vHET(i,:), (dvdtHET(i,:)), 'r')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax2 = gca;
ax2.TickDir = 'out';
ax2.TickLength = [0.025 0.025];
ax2.LineWidth = 1.2;
end 

% Action potential 
figure
for i= [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,18]
% subplot(2,1,1)
plot((1:1:4000), (vWT(i,:)), 'k')
hold on 
% xlim([-80 60])
% ylim([-250 300])
box off
ax1 = gca;
ax1.TickDir = 'out';
ax1.TickLength = [0.025 0.025];
ax1.LineWidth = 1.2;

% subplot(2,1,2)
plot((1:1:4000), (vHET(i,:)), 'r')
hold on 
% xlim([-80 60])
% ylim([-250 300])
% box off
% ax2 = gca;
% ax2.TickDir = 'out';
% ax2.TickLength = [0.025 0.025];
% ax2.LineWidth = 1.2;
end 

f = gcf;
set(f, 'Renderer', 'painters');

% figure
% plot(mean(vWT), mean(dvdtWT), 'k')
% hold on 
% plot(mean(vHET), mean(dvdtHET), 'r')



%% Plot example phase plane traces.

figure
for i= [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,18]
subplot(2,1,1)
plot(vWT(2:end,i), (dvdtWT(:,i)), 'k')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax1 = gca;
ax1.TickDir = 'out';
ax1.TickLength = [0.025 0.025];
ax1.LineWidth = 1.2;

subplot(2,1,2)
plot(vHET(2:end,i), smooth(dvdtHET(:,i)), 'r')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax2 = gca;
ax2.TickDir = 'out';
ax2.TickLength = [0.025 0.025];
ax2.LineWidth = 1.2;
end 

f = gcf;
f.Position = [680   461   386   637];
set(f, 'Renderer', 'painters');

% NO i = 3 or i = 17


%% ALL SPIKES IN FIRST SWEEP! 

WTVALS = [];
WDV = [];

for kk = 1:nWT
    d = cell2mat(phase_plane.v_1REP(allWT(kk)));
    dv = cell2mat(phase_plane.dvdt_1REP(allWT(kk)));
    WTVALS = vertcat(WTVALS, d);
    WDV = vertcat(WDV, dv);
end 

HETVALS = [];
HDV = [];

for kk = 1:nHET
    d = cell2mat(phase_plane.v_1REP(allHET(kk)));
    dv = cell2mat(phase_plane.dvdt_1REP(allHET(kk)));
    HETVALS = vertcat(HETVALS, d);
    HDV = vertcat(HDV, dv);
end 

%% Only FIRST SPIKE in FIRST SWEEP per cell

WTVALS = [];
WDV = [];

for kk = 1:nWT
    d = cell2mat(phase_plane.v_1REP(allWT(kk)));
    dv = cell2mat(phase_plane.dvdt_1REP(allWT(kk)));
    WTVALS = vertcat(WTVALS, d(end,:));
    WDV = vertcat(WDV, dv(end, :));
end 

HETVALS = [];
HDV = [];

for kk = 1:nHET
    d = cell2mat(phase_plane.v_1REP(allHET(kk)));
    dv = cell2mat(phase_plane.dvdt_1REP(allHET(kk)));
    HETVALS = vertcat(HETVALS, d(end,:));
    HDV = vertcat(HDV, dv(end,:));
end 


% 
% figure
% plot(nanmean(WTVALS), nanmean(WDV), 'k')
% hold on 
% plot(nanmean(HETVALS), nanmean(HDV), 'r')
% 
% figure
% plot((WTVALS), (WDV), 'k')
% hold on 
% plot((HETVALS), (HDV), 'r')

% Plot all the traces...

figure
for i = 1:96
subplot(2,1,1)
plot(vWT(i,:), smooth(dvdtWT(i,:)), 'k')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax1 = gca;
ax1.TickDir = 'out';
ax1.TickLength = [0.025 0.025];
ax1.LineWidth = 1.2;
end 

for i = 1:123
subplot(2,1,2)
plot(vHET(i,:), smooth(dvdtHET(i,:)), 'r')
hold on 
xlim([-80 60])
ylim([-250 300])
box off
ax2 = gca;
ax2.TickDir = 'out';
ax2.TickLength = [0.025 0.025];
ax2.LineWidth = 1.2;
end 

f = gcf;
f.Position = [680   461   386   637];
set(f, 'Renderer', 'painters');

%% VARIABLES and STATS 

% Want to quantify 
% 1 - AP peak amplitude
% 2 - AP threshold (dv/dt to reach 20mV/ms)
% 3 - AP 1/2 width - from thresh to peak - half. 
% 4 - AP rise time. 
% 5 - AP decay time? 

% Check data:
% figure; plot(WTVALS(5,:))

nWT = numel(WTVALS(:,1));
nHET = numel(HETVALS(:,1)); 

peakWT = [];
ThreshWT = [];
riseWT = [];
whpWT = [];
decayWT = [];

for jj = 1:nWT
    
    % 1 - crop data
    data = WTVALS(jj, :);
    data2 = WDV(jj, :);
    
    % 2 - find peak ampliture (v)
    md = max(data);
    peakWT = [peakWT, md];
    
    %3 - Find which row WDV > 20
    if jj == 60 || jj == 61 || jj == 64 || jj == 65
        row20 = find(data2(1, 1200:3000)>20);
        rr = row20(1)+1200;
        t_max = find(data(1, 1200:3000)==max(data(1, 1200:3000)))+1200;
    else
        row20 = find(data2>20);
        rr = row20(1);
        t_max = find(data==max(data));
    end
    
    threshV = data(rr);
    ThreshWT = [ThreshWT, threshV];
    
    % 4 - Rise Time
    % Time in ms from threshold mV to peak mV 
    
    if numel(t_max)>1
        t_max = t_max(1);
    end 
    
    t_thresh = rr; % row where dv/dt > 20
    
    rise_time = (t_max-t_thresh)*0.02;
    riseWT = [riseWT, rise_time];
    
    
    % 5 - Width half peak 
    hp = (md-threshV)/2; % half peak amplitude (mV)
    data3 = data-threshV;
    data4 = data3-hp;
    data5 = sign(data4);
    if jj == 60 || jj ==61 || jj ==62 || jj ==64 || jj ==65
        data5(1, 1:1200) = ones(1,1200)*-1;
        data5(1, 2801:4000) = ones(1, 1200)*-1;
    end
    all1 = find(data5==1);
    hw = (all1(end)-all1(1))*0.02;
    whpWT = [whpWT, hw];
    
    % 6 - Decay time. 
    % From peak to most negative value. 
    mostneg = min(data);
    t_min = find(data==min(data));
    if numel(t_min)>1
        t_min = t_min(1);
    end 
    decayt = (t_min-t_max)*0.02;
    decayWT = [decayWT, decayt];

end 

peakHET = [];
ThreshHET = [];
riseHET = [];
whpHET = [];
decayHET = [];

for jj = 1:nHET
    
    % 1 - crop data
    data = HETVALS(jj, :);
    data2 = HDV(jj, :);
    
    m = max(data2);
    if m>20 
    % 2 - find peak ampliture (v)
    md = max(data);
    peakHET = [peakHET, md];
    
    %3 - Find which row WDV > 20
    row20 = find(data2>20);
    rr = row20(1);
    threshV = data(rr);
    ThreshHET = [ThreshHET, threshV];
    
      % 4 - Rise Time
    % Time in ms from threshold mV to peak mV 
    t_max = find(data==max(data));
    if numel(t_max)>1
        t_max = t_max(1);
    end 
    
    t_thresh = rr; % row where dv/dt > 20
    
    rise_time = (t_max-t_thresh)*0.02;
    riseHET = [riseHET, rise_time];
    
    
    % 5 - Width half peak 
    hp = (md-threshV)/2; % half peak amplitude (mV)
    data3 = data-threshV;
    data4 = data3-hp;
    data5 = sign(data4);
    all1 = find(data5==1);
    hw = (all1(end)-all1(1))*0.02;
    whpHET = [whpHET, hw];
    
    % 6 - Decay time. 
    % From peak to most negative value. 
    mostneg = min(data);
    t_min = find(data==min(data));
    if numel(t_min)>1
        t_min = t_min(1);
    end 
    decayt = (t_min-t_max)*0.02;
    decayHET = [decayHET, decayt];
    end 
end 

%% Peak Amplitude

% PLOT 
figure
n_wt = numel(peakWT);
n_het = numel(peakHET);

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, peakWT,'SizeData', 150, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, peakHET, 'SizeData', 150,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot([peakWT, peakHET], [ones(1,n_wt), ones(1,n_het)*2], 'Colors', 'k');
set(b, 'linew', 1.25);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
axis([0.5 2.5 0 60])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ax.TickLength = [0.02 0.02];
ax.LineWidth = 1.8;

f = gcf;
f.Position = [704   207   355   572]; 
f.Renderer = 'painters';

[p, h] = ranksum(peakWT, peakHET)
[h, p] = kstest2(peakWT, peakHET)
nanmean(peakWT)
nanmean(peakHET)
nWT = numel(peakWT)
nHET = numel(peakHET)

%% AP threshold 

% PLOT 
figure
n_wt = numel(ThreshWT);
n_het = numel(ThreshHET);

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, ThreshWT,'SizeData', 150, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, ThreshHET, 'SizeData', 150,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot([ThreshWT, ThreshHET], [ones(1,n_wt), ones(1,n_het)*2], 'Colors', 'k');
set(b, 'linew', 1.25);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
axis([0.5 2.5 -50 -10])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ax.TickLength = [0.02 0.02];
ax.LineWidth = 1.8;

f = gcf;
f.Position = [704   207   355   572]; 
f.Renderer = 'painters';

[p, h] = ranksum(ThreshWT, ThreshHET)
[h, p] = kstest2(ThreshWT, ThreshHET)
nanmean(ThreshWT)
nanmean(ThreshHET)
nWT = numel(ThreshWT)
nHET = numel(ThreshHET)

%% Rise Time

% PLOT 
figure
n_wt = numel(riseWT);
n_het = numel(riseHET);

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, riseWT,'SizeData', 150, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, riseHET, 'SizeData', 150,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot([riseWT, riseHET], [ones(1,n_wt), ones(1,n_het)*2], 'Colors', 'k');
set(b, 'linew', 1.25);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
axis([0.5 2.5 0 2.2])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ax.TickLength = [0.02 0.02];
ax.LineWidth = 1.8;

f = gcf;
f.Position = [704   207   355   572]; 
f.Renderer = 'painters';

[p, h] = ranksum(riseWT, riseHET)
[h, p] = kstest2(riseWT, riseHET)
nanmean(riseWT)
nanmean(riseHET)
nWT = numel(riseWT)
nHET = numel(riseHET)


%% Width Half Peak 

% PLOT 
figure
n_wt = numel(whpWT);
n_het = numel(whpHET);

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, whpWT,'SizeData', 150, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, whpHET, 'SizeData', 150,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot([whpWT, whpHET], [ones(1,n_wt), ones(1,n_het)*2], 'Colors', 'k');
set(b, 'linew', 1.25);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
axis([0.5 2.5 0 2.5])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ax.TickLength = [0.02 0.02];
ax.LineWidth = 1.8;

f = gcf;
f.Position = [704   207   355   572]; 
f.Renderer = 'painters';

[p, h] = ranksum(whpWT, whpHET)
[h, p] = kstest2(whpWT, whpHET)
nanmean(whpWT)
nanmean(whpHET)
nWT = numel(whpWT)
nHET = numel(whpHET)


%% Decay Time

% PLOT 
figure
n_wt = numel(decayWT);
n_het = numel(decayHET);

x1 = ones(1, n_wt);
x2 = ones(1, n_het)*2;

scatter(x1, decayWT,'SizeData', 150, 'MarkerEdgeColor', [0.6 0.6 0.6], 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
hold on 
scatter(x2, decayHET, 'SizeData', 150,'MarkerEdgeColor', col, 'jitter', 'on', 'jitterAmount', 0.1, 'LineWidth', 1.2)
b = boxplot([decayWT, decayHET], [ones(1,n_wt), ones(1,n_het)*2], 'Colors', 'k');
set(b, 'linew', 1.25);

xticks([1,2])
xticklabels({''})
ax = gca;
ax.FontSize = 30;
box off
axis([0.5 2.5 0 9])
ax.XAxis.Visible = 'off'; 
hold off
ax.TickDir = 'out'; 
ax.TickLength = [0.02 0.02];
ax.LineWidth = 1.8;

f = gcf;
f.Position = [704   207   355   572]; 
f.Renderer = 'painters';

[p, h] = ranksum(decayWT, decayHET)
[h, p] = kstest2(decayWT, decayHET)
nanmean(decayWT)
nanmean(decayHET)
nWT = numel(decayWT)
nHET = numel(decayHET)


%% Analyse RF properties from checker stimulus 

% Go from 4-D 'RF' to 'RFsum', 'RFr', 'TempRFs', 'GRF_full', 'GRF_r', 'GRF_info', 'ids_info'
 
% Script generated by Burnett 29/10/20, adapted from Olga's script
% 'analyze_checkers.m'. 

% The purpose of the script is to take the 'RF' 4D array - of all the
% values of the pixels of the screen over time for each cluster and analyse
% the temporal and spatial RF properties. 

%% Add Info from Cluster_Info.tsv to the RF_sum array. 
% This information will be kept with the clusters and can be used to link clusters between analyses. 
% START in the individual trial folders. e.g. 'C:\Data_analysis\Silicon_Probe_Analysis\Example_Data\200925_GN7475_Test1_1250';

folder_to_analyze = cd; %'C:\Data_analysis\Silicon_Probe_Analysis\Example_Data\200925_GN7475_Test1_1250';

cluster_info_gen_file= fullfile(folder_to_analyze,'cluster_info.tsv');
ids_info = get_all_info(cluster_info_gen_file);

% Add another column 'REAL DEPTH' to ids_info. 
recording_depth = str2num(folder_to_analyze(end-3:end)); 
real_depth = recording_depth - (800- ids_info(:,4));
ids_info(:,6) = real_depth; 
n_ids = numel(ids_info(:,1));

% Add date, animal number and trial number. 
dat = str2double(folder_to_analyze(end-23:end-18));
animalnum = str2double(folder_to_analyze(end-14:end-11));
trialnum = str2double(folder_to_analyze(end-5));
ids_info(:,8) = dat; 
ids_info(:,9) = animalnum;
ids_info(:,10) = trialnum; 
%
results_folder = strcat(folder_to_analyze, '\results');
cd(results_folder)
load('RF_all.mat')

% ids_info(:,11) = goodclusters; 


%% Make RFsum: 
ncol = 30; %This was always 30. 
texRect_size=[608, 342];
sq_w=single(floor(texRect_size(1)/ncol)); %size of the square
nrow=max(1,floor(texRect_size(2)/sq_w)); % number of checker rows
% npatt=ceil(nfr/nframes)+10;
% frame_array=zeros(nrow*sq_w, ncol*sq_w,npatt,'uint8');
imheight = nrow*sq_w;
imwidth = ncol*sq_w; 
checker_size=sq_w;

%make crop size be twice the size of the checker
crop_size_half=checker_size*4; %
full_crop_size=crop_size_half*2+1;

n_gcl = numel(goodclusters);
RFsum=zeros(n_gcl,full_crop_size, full_crop_size);
RFr=zeros(n_gcl,full_crop_size);

for ci=1:n_gcl
    RFi=squeeze(RF(ci,:,:,:)); % selecting all pixels over time for an individual cluster. 
%     real_ID = goodclusters(ci); 
    vari=var(RFi,0,3); % Find the variance over time. 
    [mval,cx]=max(max(vari,[],1));
    [mval,cy]=max(max(vari,[],2));    
    %disp([ci,mval]);
    meani=mean(RFi(:));
    %find the largest deviation at the RF in time
    [mval,ct]=max(abs(squeeze(RFi(cy,cx,:))-meani)); % - here do NOT squeeze to keep time component. 
    %Crop the RF
    RFi_tocrop=zeros(crop_size_half*2+imheight,crop_size_half*2+imwidth);
    RFi_tocrop(crop_size_half+1:crop_size_half+imheight,crop_size_half+1:crop_size_half+imwidth)=RFi(:,:,ct);
    RFsum(ci,:,:)=RFi_tocrop(cy:cy+2*crop_size_half,cx:cx+2*crop_size_half);
    
    %Radial / Line RF. 
    A = squeeze(RFsum(ci,:,:));
    Am = mean(A,1);
    Am2 = mean(A,2)';
    Am3 = [Am;Am2];
    Am3 = mean(Am3); %radial average. 
    RFr(ci, :)= Am3; 
end

%% Make TEMP RF 

tempRFs = zeros(n_gcl, 37);

for ci2=1:n_gcl
cluster1 = squeeze(RF(ci2,:,:,:)); %All data for this cluster. 
real_ID = goodclusters(ci2);
vari=var(cluster1,0,3); % Find variance within this cluster. 
[mval,cx]=max(max(vari,[],1)); % Find the x/y values of highest variance. 
[mval,cy]=max(max(vari,[],2));   

meani=mean(cluster1(:)); %Find mean over entire time for this cell. 
%   tempRFCROP(ci,:) 
  tpp = squeeze(cluster1(cy:cy,cx:cx,:))-meani;
%   tpp = squeeze(tin(1,1,:));

tempRFs(ci2, 1:30) = tpp;
diffval = max(tpp) - min(tpp); 
tempRFs(ci2, 31) = diffval; 
tempRFs(ci2,32) = cx;
tempRFs(ci2,33) = cy; 
tempRFs(ci2, 34) = dat; 
tempRFs(ci2, 35) = animalnum; 

row_real_ID = find(ids_info(:,1)==goodclusters(ci2)); 
real_depth_val = ids_info(row_real_ID,6);
tempRFs(ci2,36) = real_depth_val;
tempRFs(ci2,37) = real_ID;
end 


% This used to be used to CROP but realised it didn't make a big
% difference. 

% if cx > 1 && cx <599 && cy >1 && cy < 339 % If RF is within this �box� of VF area.
%   %disp([ci,mval]);
%   meani=mean(cluster1(:)); %Find mean over entire time for this cell. 
% %   tempRFCROP(ci,:) 
%   tin = squeeze(cluster1(cy-1:cy+1,cx-1:cx+1,:))-meani; %Crop into a 3x3 square around area of highest variance. 
%   tpl = squeeze(tin(1,1,:));
%   tpl1 = squeeze(tin(2,2,:));
%   tpl2 = squeeze(tin(3,3,:));
%   tpp = mean(horzcat(tpl, tpl1, tpl2),2);
%   tpp2 = squeeze(cluster1(cy:cy,cx:cx,:))-meani;
%   figure
%   plot(tpp)
%   hold on
%   plot(tpp2)
%  else 



%% Sort Spatial RFs manually into 'good' and 'bad' - add values 1/0 to ids_info about whether RF is good/bad. 
bad_RF = []; 
good_RF = [];
prompt = 'Press y for GCL, n for BCL: ';

for j = 1:n_gcl
    A = squeeze(RFsum(j,:,:)); % 321 * 321 square - 103,041 pixels. 
    real_ID = goodclusters(j);
    row_real_ID = find(ids_info(:,1)==real_ID); 
    figure
    imagesc(A)
    colorbar
    colormap(redblue)
    x = input(prompt, 's'); 
    if x == 'n'
        bad_RF = [bad_RF, j];
        ids_info(row_real_ID,7) = 0; 
    elseif x == 'y'
        good_RF = [good_RF, j];
        ids_info(row_real_ID,7) = 1; 
    end
    close
end 
   

%% Then make new 'RFsum' with ONLY the good clusters (GRF).  - SPATIAL RFs
n_grf = numel(good_RF); 

GRF_full = zeros(n_grf, 161, 161); 
GRF_r = zeros(n_grf, 161); 
GRF_info = zeros(n_grf, 10); 

for j2 = 1:n_grf
   
    cl_id = good_RF(j2);
    real_ID = goodclusters(cl_id);
    real_ID_row = find(ids_info(:,1)==real_ID); 
%     real_id = find(ids_info(:,1)==good_RF(j2));
    A = squeeze(RFsum(cl_id,:,:));
    GRF_full(j2, :, :) = A ; %full RF. 
%     figure
%     subplot(n_grf,2,j2*2-1)
%     imagesc(A)
%     colormap(redblue)
%     title(string(cl_id))
%     xticks([])
%     xticklabels({})
%     yticks([])
%     yticklabels({})
%     subplot(n_grf,2,j2*2)
    Am = mean(A,1);
    Am2 = mean(A,2)';
    Am3 = [Am;Am2];
    Am3 = mean(Am3); %radial average. 
%     plot(smooth(Am3,6), 'k')
    GRF_r(j2, :)= Am3;
    GRF_info(j2, :) = ids_info(real_ID_row,:);  
end 


exp_name = folder_to_analyze(end-23:end); 
% save_folder = 'C:\Data_analysis\Silicon_Probe_Analysis\RF_files\GRF';
save_folder = 'C:\Data_analysis\Silicon_Probe_Analysis\RF_files\201211_RF_ids_info'; 
save(fullfile(strcat(save_folder,'\', exp_name, '_RF.mat')), 'RFsum', 'RFr', 'tempRFs', 'ids_info');

save(fullfile(strcat(save_folder,'\', exp_name, '_GRF.mat')), 'GRF_full', 'GRF_r', 'tempRFs', 'GRF_info', 'good_RF');

save(fullfile(strcat(save_folder,'\', exp_name, '_ids_info.mat')), 'ids_info');
save(fullfile(strcat(folder_to_analyze,'\results\', exp_name, '_ids_info.mat')), 'ids_info');

clearvars -except directory2 D folderpath inpath directory dir_path
     
% save(strcat(exp_name, '_GRF.mat'), 'GRF_full', 'GRF_r');

%% 

    
    
%     RFsum = RFsum2;
        
%% RF - spatial analysis

%% PLOT ALL RF - with ID
% % figure
% % for j = 1:n_gcl
% %     A = squeeze(RFsum(j,:,:)); % 321 * 321 square - 103,041 pixels. 
% %     subplot(10,7,j)
% %     imagesc(A)
% %     colormap(redblue)
% %     title(j)
% % end 


% 
% %PLOT RF LINES 
% % figure
% % for j2 = 1:n_grf
% %     cl_id = good_RF(j2);
% %     subplot(7,3,j2)
% %     A = squeeze(RFsum(cl_id,:,:));
% %     Am = mean(A,1);
% %     Am2 = mean(A,2)';
% %     Am3 = [Am;Am2];
% %     Am3 = mean(Am3);
% %     hold on 
% %     plot(smooth(Am3,6), 'k')
% %     xticks([])
% %     xticklabels({})
% % end 
% % sgtitle('Good RF')
% 
% 
% Subtracting the mean? 
% meanA = mean(A);
% A2 = A-meanA;
% imagesc(23)
% colorbar
% colormap(redblue)
%% Plot Good and Bad RFs to check. 

% % Plot Good RF to check. 
%  n_grf = numel(good_RF); 
% figure
% for j2 = 1:n_grf
%     cl_id = good_RF(j2);
%     subplot(7,3,j2)
%     A = squeeze(RFsum(cl_id,:,:));
%     imagesc(A)
%     colormap(redblue)
%     title(string(cl_id))
%     xticks([])
%     xticklabels({})
%     yticks([])
%     yticklabels({})
% end 
% sgtitle('Good RF')
% pause 
% close

% 
% % Plot Bad RF to check. 
% n_brf = numel(bad_RF); 
% figure
% for j3 = 1:n_brf
%     cl_id = bad_RF(j3);
%     subplot(7,6,j3)
%     A = squeeze(RFsum(cl_id,:,:));
%     imagesc(A)
%     colormap(redblue)
%     title(string(cl_id))
%     xticks([])
%     xticklabels({})
%     yticks([])
%     yticklabels({})
% end 
% sgtitle('Bad RF')


% Make structure 'RFinfo' with 
% for c2 = 1:n_gcl
%     real_clusterID = goodclusters(c2); 
%     RFinfo.ID(c2) = real_clusterID;
%     A = squeeze(RFsum(c2,:,:)); 
%     RFinfo.vals(c2) = {A};
%     RFinfo.amp(c2) = ids_info(real_clusterID+1,2); 
%     RFinfo.Ch(c2) = ids_info(real_clusterID+1,3); 
%     RFinfo.Depth(c2) = ids_info(real_clusterID+1,4);
%     RFinfo.NumSpikes(c2) = ids_info(real_clusterID+1,5);
%     RFinfo.RealDepth(c2) = ids_info(real_clusterID+1,6);
% end 
%     

% ids_info(:,7) = goodclusters; 


% % First, find properties of checker. 
% ncol = 30; %This was always 30. 
% texRect_size=[608, 342];
% sq_w=single(floor(texRect_size(1)/ncol)); %size of the square
% nrow=max(1,floor(texRect_size(2)/sq_w)); % number of checker rows
% % npatt=ceil(nfr/nframes)+10;
% % frame_array=zeros(nrow*sq_w, ncol*sq_w,npatt,'uint8');
% imheight = nrow*sq_w;
% imwidth = ncol*sq_w; 
% checker_size=sq_w;
% 
% %make crop size be twice the size of the checker
% crop_size_half=checker_size*4; %
% full_crop_size=crop_size_half*2+1;



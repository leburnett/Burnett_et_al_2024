% GRATINGS ANALYSIS from SPIKING data.
% Generated by Burnett - 21/02/22

%% 3 REPS!!


%%
% For the analysis of the grating stimulus in the ephys setup.

% From "spike_timing" data - save a file for each recording - i.e. one  depth for one animal with:
%  - ds_ind array - values of the P and NP directions, the neural responses to these directions, the DS of the cell and the depth.
%  - arrays of SUM of spikes within each bar stimulus - for heatmap visualisation.
%  - array with average spikes per 0.2 frames - for plotting traces.
% the arrays are there for Rep1, Rep2 and average over the 2 reps.

recsp = 20000; % 20 kHz!
angls = 0:45:315;

save_path = '/Users/lauraburnett/Data_Analysis_Mac/Silicon_Probe/SPIKESS/Gratings/Grating_Per_Rec';

%% % FIND FILES, FIELNAME, MOUSE, DATE, DEPTH

files = dir('*_Grating_*');
n_tot = numel(files);

for jjjj = 1:24:n_tot
    disp(jjjj)
    for i2 = 1:3
        if i2 ==1
            val = jjjj;
            filename = files(val).name;
            date = str2num(filename(1:6));
            ani = str2num(filename(10:13));
            test = str2num(filename(19));
            probe_depth = str2num(filename(21:24));
            stim_num = filename(48:end-4);
            fn = filename(1:45);
            
            % Create the names of the individaul files for the 8 different directions.
            stim1f = strcat(fn, '0_', stim_num, '.mat');
            stim2f = strcat(fn, '45_', stim_num, '.mat');
            stim3f = strcat(fn, '90_', stim_num, '.mat');
            stim4f = strcat(fn, '135_', stim_num, '.mat');
            stim5f = strcat(fn, '180_', stim_num, '.mat');
            stim6f = strcat(fn, '225_', stim_num, '.mat');
            stim7f = strcat(fn, '270_', stim_num, '.mat');
            stim8f = strcat(fn, '315_', stim_num, '.mat');
            
            % load the spike timing data of these 8 different directions.
            load(stim1f, 'grating_spike_t', 'ids_depth')
            s1 = grating_spike_t;
            load(stim2f, 'grating_spike_t')
            s2 = grating_spike_t;
            load(stim3f, 'grating_spike_t')
            s3 = grating_spike_t;
            load(stim4f, 'grating_spike_t')
            s4 = grating_spike_t;
            load(stim5f, 'grating_spike_t')
            s5 = grating_spike_t;
            load(stim6f, 'grating_spike_t')
            s6 = grating_spike_t;
            load(stim7f, 'grating_spike_t')
            s7 = grating_spike_t;
            load(stim8f, 'grating_spike_t')
            s8 = grating_spike_t;
            
            raster_data = horzcat(s1,s2,s3,s4,s5,s6,s7); 
            
            %% 1 - Find the timing of the start and end of each stimulus.
            n_gcl = numel(s1);
            
            %S1
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x1 = rng(1);
            x1b = x1+(recsp*5);
            close
            
            %S2
            for i = 1:n_gcl
                spiket = cell2mat(s2(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x2 = rng(1);
            x2b = x2+(recsp*5);
            close
            
            %S3
            for i = 1:n_gcl
                spiket = cell2mat(s3(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x3 = rng(1);
            x3b = x3+(recsp*5);
            close
            
            %S4
            for i = 1:n_gcl
                spiket = cell2mat(s4(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x4 = rng(1);
            x4b = x4+(recsp*5);
            close
            
            %S5
            for i = 1:n_gcl
                spiket = cell2mat(s5(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x5 = rng(1);
            x5b = x5+(recsp*5);
            close
            
            %S6
            for i = 1:n_gcl
                spiket = cell2mat(s6(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x6 = rng(1);
            x6b = x6+(recsp*5);
            close
            
            %S7
            for i = 1:n_gcl
                spiket = cell2mat(s7(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x7 = rng(1);
            x7b = x7+(recsp*5);
            close
            
            %S8
            for i = 1:n_gcl
                spiket = cell2mat(s8(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x8 = rng(1);
            x8b = x8+(recsp*5);
            close
            
            
            
            %% Bins values by each bar "stimulus" and count the number of spikes per direction - 8 BINS.
            
            spikes_per_stim = zeros(n_gcl, 8);
            for i = 1:n_gcl
                spikes_per_stim(i, 1) = numel(cell2mat(s1(i, 1)));
                spikes_per_stim(i, 2) = numel(cell2mat(s2(i, 1)));
                spikes_per_stim(i, 3) = numel(cell2mat(s3(i, 1)));
                spikes_per_stim(i, 4) = numel(cell2mat(s4(i, 1)));
                spikes_per_stim(i, 5) = numel(cell2mat(s5(i, 1)));
                spikes_per_stim(i, 6) = numel(cell2mat(s6(i, 1)));
                spikes_per_stim(i, 7) = numel(cell2mat(s7(i, 1)));
                spikes_per_stim(i, 8) = numel(cell2mat(s8(i, 1)));
            end
            
            % NORMALSE - PER STIMULUS
            norm_spikes_per_stim = zeros(n_gcl, 8);
            
            for jj = 1:n_gcl
                rho = spikes_per_stim(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                norm_spikes_per_stim(jj, :) = rho2;
            end
            
            %% Plot HEATMAP of the normalised activity during each bar stimulus.
            %         figure; imagesc(norm_spikes_per_stim)
            
            
            %% Number of bins for arrays where calculating the average spikes across 0.2 frames - should be 200.
            nbins = numel(x1:recsp/60:x2)-1;
            
            %% hc_bar - spikes per 0.2seconds  - similar concept but binned per 0.2s not per stimulus (5s)
            
            spikes_per_time = zeros(n_gcl, 2400);
            
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                spikes_per_time(i, 1:300) = histcounts(spiket, x1:recsp/60:x1b);
                %
                spiket = cell2mat(s2(i, 1));
                spikes_per_time(i, 301:600) = histcounts(spiket, x2:recsp/60:x2b);
                %
                spiket = cell2mat(s3(i, 1));
                spikes_per_time(i, 601:900) = histcounts(spiket, x3:recsp/60:x3b);
                %
                spiket = cell2mat(s4(i, 1));
                spikes_per_time(i, 901:1200) = histcounts(spiket, x4:recsp/60:x4b);
                %
                spiket = cell2mat(s5(i, 1));
                spikes_per_time(i, 1201:1500) = histcounts(spiket, x5:recsp/60:x5b);
                %
                spiket = cell2mat(s6(i, 1));
                spikes_per_time(i, 1501:1800) = histcounts(spiket, x6:recsp/60:x6b);
                %
                spiket = cell2mat(s7(i, 1));
                spikes_per_time(i, 1801:2100) = histcounts(spiket, x7:recsp/60:x7b);
                %
                spiket = cell2mat(s8(i, 1));
                spikes_per_time(i, 2101:2400) = histcounts(spiket, x8:recsp/60:x8b);
            end
            
            %%
            %         figure; imagesc(spikes_per_time)
            %         figure; plot(nanmean(spikes_per_time))
            
            %% Normalise to the maximum firing of the cell.
            
            norm_spikes_per_time = zeros(n_gcl, 2400);
            
            for jj = 1:n_gcl
                
                rho = spikes_per_time(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                
                norm_spikes_per_time(jj, :) = rho2;
            end
            
            %% PLOTS % % % % % %
            
            %         figure; plot(nanmean(norm_spikes_per_time));
            %         figure; imagesc(norm_spikes_per_time)
            
            %% Direction Selectivity Index
            
            % np = response to non-prefered (180 degrees from pref).
            % p = response to pref direction.
            
           ds_ind = zeros(n_gcl, 5);
            
            for i = 1:n_gcl
                pref_id = find(spikes_per_stim(i,:) == (max(spikes_per_stim(i, :))));
                
                if ~isempty(pref_id)
                    if numel(pref_id)>1
                        pref_id = pref_id(1);
                    end
                    
                    p = spikes_per_stim(i, pref_id);
                    
                    if pref_id <=4
                        np_id = pref_id+4;
                    elseif pref_id > 4
                        np_id = pref_id-4;
                    end
                    
                    np = spikes_per_stim(i, np_id);
                    
                    ds_ind(i,1) = angls(pref_id);
                    ds_ind(i,2) = p;
                    ds_ind(i,3) = angls(np_id);
                    ds_ind(i,4) = np;
                    
                    if p ~= 0
                        ds_ind(i,5) = ((p-np)/(p+np));
                    else
                        ds_ind(i,1:5) = NaN(1,5);
                    end
                    
                else
                    ds_ind(i,1) = NaN;
                    ds_ind(i,2) = NaN;
                    ds_ind(i,3) = NaN;
                    ds_ind(i,4) = NaN;
                    ds_ind(i,5) = NaN;
                end
                
                
            end
            
            %% COMBINE REC1 and REC2 together
            
            % Make a copy of this array to then concatenate with the ds_ind array of
            % the second presentation of the stimulus within the recording to compare
            % the cell responses.
            
            ds_ind1 = ds_ind; % REP 1
            spikes_per_stim1 = spikes_per_stim;
            spikes_per_time1 = spikes_per_time;
            norm_spikes_per_stim1 = norm_spikes_per_stim;
            norm_spikes_per_time1 = norm_spikes_per_time;
            raster_data1 = raster_data;
            
            dates = repmat(date, n_gcl, 1);
            anis = repmat(ani, n_gcl, 1);
            tests = repmat(test, n_gcl, 1);
            probe_depths = repmat(probe_depth, n_gcl, 1);
            
        elseif i2 == 2
            
             val = jjjj+1;
            filename = files(val).name;
            date = str2num(filename(1:6));
            ani = str2num(filename(10:13));
            test = str2num(filename(19));
            probe_depth = str2num(filename(21:24));
            stim_num = filename(48:end-4);
            fn = filename(1:45);
            
            % Create the names of the individaul files for the 8 different directions.
            stim1f = strcat(fn, '0_', stim_num, '.mat');
            stim2f = strcat(fn, '45_', stim_num, '.mat');
            stim3f = strcat(fn, '90_', stim_num, '.mat');
            stim4f = strcat(fn, '135_', stim_num, '.mat');
            stim5f = strcat(fn, '180_', stim_num, '.mat');
            stim6f = strcat(fn, '225_', stim_num, '.mat');
            stim7f = strcat(fn, '270_', stim_num, '.mat');
            stim8f = strcat(fn, '315_', stim_num, '.mat');
            
            % load the spike timing data of these 8 different directions.
            load(stim1f, 'grating_spike_t', 'ids_depth')
            s1 = grating_spike_t;
            load(stim2f, 'grating_spike_t')
            s2 = grating_spike_t;
            load(stim3f, 'grating_spike_t')
            s3 = grating_spike_t;
            load(stim4f, 'grating_spike_t')
            s4 = grating_spike_t;
            load(stim5f, 'grating_spike_t')
            s5 = grating_spike_t;
            load(stim6f, 'grating_spike_t')
            s6 = grating_spike_t;
            load(stim7f, 'grating_spike_t')
            s7 = grating_spike_t;
            load(stim8f, 'grating_spike_t')
            s8 = grating_spike_t;
            
            raster_data = horzcat(s1,s2,s3,s4,s5,s6,s7); 
            
            %% 1 - Find the timing of the start and end of each stimulus.
            n_gcl = numel(s1);
            
            %S1
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x1 = rng(1);
            x1b = x1+(recsp*5);
            close
            
            %S2
            for i = 1:n_gcl
                spiket = cell2mat(s2(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x2 = rng(1);
            x2b = x2+(recsp*5);
            close
            
            %S3
            for i = 1:n_gcl
                spiket = cell2mat(s3(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x3 = rng(1);
            x3b = x3+(recsp*5);
            close
            
            %S4
            for i = 1:n_gcl
                spiket = cell2mat(s4(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x4 = rng(1);
            x4b = x4+(recsp*5);
            close
            
            %S5
            for i = 1:n_gcl
                spiket = cell2mat(s5(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x5 = rng(1);
            x5b = x5+(recsp*5);
            close
            
            %S6
            for i = 1:n_gcl
                spiket = cell2mat(s6(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x6 = rng(1);
            x6b = x6+(recsp*5);
            close
            
            %S7
            for i = 1:n_gcl
                spiket = cell2mat(s7(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x7 = rng(1);
            x7b = x7+(recsp*5);
            close
            
            %S8
            for i = 1:n_gcl
                spiket = cell2mat(s8(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x8 = rng(1);
            x8b = x8+(recsp*5);
            close
            
            
            
            %% Bins values by each bar "stimulus" and count the number of spikes per direction - 8 BINS.
            
            spikes_per_stim = zeros(n_gcl, 8);
            for i = 1:n_gcl
                spikes_per_stim(i, 1) = numel(cell2mat(s1(i, 1)));
                spikes_per_stim(i, 2) = numel(cell2mat(s2(i, 1)));
                spikes_per_stim(i, 3) = numel(cell2mat(s3(i, 1)));
                spikes_per_stim(i, 4) = numel(cell2mat(s4(i, 1)));
                spikes_per_stim(i, 5) = numel(cell2mat(s5(i, 1)));
                spikes_per_stim(i, 6) = numel(cell2mat(s6(i, 1)));
                spikes_per_stim(i, 7) = numel(cell2mat(s7(i, 1)));
                spikes_per_stim(i, 8) = numel(cell2mat(s8(i, 1)));
            end
            
            % NORMALSE - PER STIMULUS
            norm_spikes_per_stim = zeros(n_gcl, 8);
            
            for jj = 1:n_gcl
                rho = spikes_per_stim(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                norm_spikes_per_stim(jj, :) = rho2;
            end
            
            %% Plot HEATMAP of the normalised activity during each bar stimulus.
            %         figure; imagesc(norm_spikes_per_stim)
            
            
            %% Number of bins for arrays where calculating the average spikes across 0.2 frames - should be 200.
            nbins = numel(x1:recsp/60:x2)-1;
            
            %% hc_bar - spikes per 0.2seconds  - similar concept but binned per 0.2s not per stimulus (5s)
            
            spikes_per_time = zeros(n_gcl, 2400);
            
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                spikes_per_time(i, 1:300) = histcounts(spiket, x1:recsp/60:x1b);
                %
                spiket = cell2mat(s2(i, 1));
                spikes_per_time(i, 301:600) = histcounts(spiket, x2:recsp/60:x2b);
                %
                spiket = cell2mat(s3(i, 1));
                spikes_per_time(i, 601:900) = histcounts(spiket, x3:recsp/60:x3b);
                %
                spiket = cell2mat(s4(i, 1));
                spikes_per_time(i, 901:1200) = histcounts(spiket, x4:recsp/60:x4b);
                %
                spiket = cell2mat(s5(i, 1));
                spikes_per_time(i, 1201:1500) = histcounts(spiket, x5:recsp/60:x5b);
                %
                spiket = cell2mat(s6(i, 1));
                spikes_per_time(i, 1501:1800) = histcounts(spiket, x6:recsp/60:x6b);
                %
                spiket = cell2mat(s7(i, 1));
                spikes_per_time(i, 1801:2100) = histcounts(spiket, x7:recsp/60:x7b);
                %
                spiket = cell2mat(s8(i, 1));
                spikes_per_time(i, 2101:2400) = histcounts(spiket, x8:recsp/60:x8b);
            end
            
            %%
            %         figure; imagesc(spikes_per_time)
            %         figure; plot(nanmean(spikes_per_time))
            
            %% Normalise to the maximum firing of the cell.
            
            norm_spikes_per_time = zeros(n_gcl, 2400);
            
            for jj = 1:n_gcl
                
                rho = spikes_per_time(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                
                norm_spikes_per_time(jj, :) = rho2;
            end
            
            %% PLOTS % % % % % %
            
            %         figure; plot(nanmean(norm_spikes_per_time));
            %         figure; imagesc(norm_spikes_per_time)
            
            %% Direction Selectivity Index
            
            % np = response to non-prefered (180 degrees from pref).
            % p = response to pref direction.
            
            ds_ind = zeros(n_gcl, 5);
            
            for i = 1:n_gcl
                pref_id = find(spikes_per_stim(i,:) == (max(spikes_per_stim(i, :))));
                
                if ~isempty(pref_id)
                    if numel(pref_id)>1
                        pref_id = pref_id(1);
                    end
                    
                    p = spikes_per_stim(i, pref_id);
                    
                    if pref_id <=4
                        np_id = pref_id+4;
                    elseif pref_id > 4
                        np_id = pref_id-4;
                    end
                    
                    np = spikes_per_stim(i, np_id);
                    
                    ds_ind(i,1) = angls(pref_id);
                    ds_ind(i,2) = p;
                    ds_ind(i,3) = angls(np_id);
                    ds_ind(i,4) = np;
                    
                    if p ~= 0
                        ds_ind(i,5) = ((p-np)/(p+np)); %1-(np/p);
                    else
                        ds_ind(i,1:5) = NaN(1,5);
                    end
                    
                else
                    ds_ind(i,1) = NaN;
                    ds_ind(i,2) = NaN;
                    ds_ind(i,3) = NaN;
                    ds_ind(i,4) = NaN;
                    ds_ind(i,5) = NaN;
                end
                
                
            end
            
            %% COMBINE REC1 and REC2 together
            
            % Make a copy of this array to then concatenate with the ds_ind array of
            % the second presentation of the stimulus within the recording to compare
            % the cell responses.
            
            ds_ind2 = ds_ind; % REP 1
            spikes_per_stim2 = spikes_per_stim;
            spikes_per_time2 = spikes_per_time;
            norm_spikes_per_stim2 = norm_spikes_per_stim;
            norm_spikes_per_time2 = norm_spikes_per_time;
            raster_data2 = raster_data; 
            
            
        elseif i2 ==3
            
            val = jjjj+2;
            filename = files(val).name;
            date = str2num(filename(1:6));
            ani = str2num(filename(10:13));
            test = str2num(filename(19));
            probe_depth = str2num(filename(21:24));
            stim_num = filename(48:end-4);
            fn = filename(1:45);
            
            % Create the names of the individaul files for the 8 different directions.
            stim1f = strcat(fn, '0_', stim_num, '.mat');
            stim2f = strcat(fn, '45_', stim_num, '.mat');
            stim3f = strcat(fn, '90_', stim_num, '.mat');
            stim4f = strcat(fn, '135_', stim_num, '.mat');
            stim5f = strcat(fn, '180_', stim_num, '.mat');
            stim6f = strcat(fn, '225_', stim_num, '.mat');
            stim7f = strcat(fn, '270_', stim_num, '.mat');
            stim8f = strcat(fn, '315_', stim_num, '.mat');
            
            % load the spike timing data of these 8 different directions.
            load(stim1f, 'grating_spike_t', 'ids_depth')
            s1 = grating_spike_t;
            load(stim2f, 'grating_spike_t')
            s2 = grating_spike_t;
            load(stim3f, 'grating_spike_t')
            s3 = grating_spike_t;
            load(stim4f, 'grating_spike_t')
            s4 = grating_spike_t;
            load(stim5f, 'grating_spike_t')
            s5 = grating_spike_t;
            load(stim6f, 'grating_spike_t')
            s6 = grating_spike_t;
            load(stim7f, 'grating_spike_t')
            s7 = grating_spike_t;
            load(stim8f, 'grating_spike_t')
            s8 = grating_spike_t;
            
            raster_data = horzcat(s1,s2,s3,s4,s5,s6,s7); 
            
            %% 1 - Find the timing of the start and end of each stimulus.
            n_gcl = numel(s1);
            
            %S1
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x1 = rng(1);
            x1b = x1+(recsp*5);
            close
            
            %S2
            for i = 1:n_gcl
                spiket = cell2mat(s2(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x2 = rng(1);
            x2b = x2+(recsp*5);
            close
            
            %S3
            for i = 1:n_gcl
                spiket = cell2mat(s3(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x3 = rng(1);
            x3b = x3+(recsp*5);
            close
            
            %S4
            for i = 1:n_gcl
                spiket = cell2mat(s4(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x4 = rng(1);
            x4b = x4+(recsp*5);
            close
            
            %S5
            for i = 1:n_gcl
                spiket = cell2mat(s5(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x5 = rng(1);
            x5b = x5+(recsp*5);
            close
            
            %S6
            for i = 1:n_gcl
                spiket = cell2mat(s6(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x6 = rng(1);
            x6b = x6+(recsp*5);
            close
            
            %S7
            for i = 1:n_gcl
                spiket = cell2mat(s7(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x7 = rng(1);
            x7b = x7+(recsp*5);
            close
            
            %S8
            for i = 1:n_gcl
                spiket = cell2mat(s8(i, 1));
                nspikes = numel(spiket);
                y = ones(nspikes,1)*i;
                plot(spiket, y, 'k.');
                hold on
            end
            axis tight
            rng = xlim;
            x8 = rng(1);
            x8b = x8+(recsp*5);
            close
            
            
            
            %% Bins values by each bar "stimulus" and count the number of spikes per direction - 8 BINS.
            
            spikes_per_stim = zeros(n_gcl, 8);
            for i = 1:n_gcl
                spikes_per_stim(i, 1) = numel(cell2mat(s1(i, 1)));
                spikes_per_stim(i, 2) = numel(cell2mat(s2(i, 1)));
                spikes_per_stim(i, 3) = numel(cell2mat(s3(i, 1)));
                spikes_per_stim(i, 4) = numel(cell2mat(s4(i, 1)));
                spikes_per_stim(i, 5) = numel(cell2mat(s5(i, 1)));
                spikes_per_stim(i, 6) = numel(cell2mat(s6(i, 1)));
                spikes_per_stim(i, 7) = numel(cell2mat(s7(i, 1)));
                spikes_per_stim(i, 8) = numel(cell2mat(s8(i, 1)));
            end
            
            % NORMALSE - PER STIMULUS
            norm_spikes_per_stim = zeros(n_gcl, 8);
            
            for jj = 1:n_gcl
                rho = spikes_per_stim(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                norm_spikes_per_stim(jj, :) = rho2;
            end
            
            %% Plot HEATMAP of the normalised activity during each bar stimulus.
            %         figure; imagesc(norm_spikes_per_stim)
            
            
            %% Number of bins for arrays where calculating the average spikes across 0.2 frames - should be 200.
            nbins = numel(x1:recsp/60:x2)-1;
            
            %% hc_bar - spikes per 0.2seconds  - similar concept but binned per 0.2s not per stimulus (5s)
            
            spikes_per_time = zeros(n_gcl, 2400);
            
            for i = 1:n_gcl
                spiket = cell2mat(s1(i, 1));
                spikes_per_time(i, 1:300) = histcounts(spiket, x1:recsp/60:x1b);
                %
                spiket = cell2mat(s2(i, 1));
                spikes_per_time(i, 301:600) = histcounts(spiket, x2:recsp/60:x2b);
                %
                spiket = cell2mat(s3(i, 1));
                spikes_per_time(i, 601:900) = histcounts(spiket, x3:recsp/60:x3b);
                %
                spiket = cell2mat(s4(i, 1));
                spikes_per_time(i, 901:1200) = histcounts(spiket, x4:recsp/60:x4b);
                %
                spiket = cell2mat(s5(i, 1));
                spikes_per_time(i, 1201:1500) = histcounts(spiket, x5:recsp/60:x5b);
                %
                spiket = cell2mat(s6(i, 1));
                spikes_per_time(i, 1501:1800) = histcounts(spiket, x6:recsp/60:x6b);
                %
                spiket = cell2mat(s7(i, 1));
                spikes_per_time(i, 1801:2100) = histcounts(spiket, x7:recsp/60:x7b);
                %
                spiket = cell2mat(s8(i, 1));
                spikes_per_time(i, 2101:2400) = histcounts(spiket, x8:recsp/60:x8b);
            end
            
            %%
            %         figure; imagesc(spikes_per_time)
            %         figure; plot(nanmean(spikes_per_time))
            
            %% Normalise to the maximum firing of the cell.
            
            norm_spikes_per_time = zeros(n_gcl, 2400);
            
            for jj = 1:n_gcl
                
                rho = spikes_per_time(jj,:);
                max_val = max(rho);
                rho2 = rho/max_val;
                
                norm_spikes_per_time(jj, :) = rho2;
            end
            
            %% PLOTS % % % % % %
            
            %         figure; plot(nanmean(norm_spikes_per_time));
            %         figure; imagesc(norm_spikes_per_time)
            
            %% Direction Selectivity Index
            
            % np = response to non-prefered (180 degrees from pref).
            % p = response to pref direction.
            
            ds_ind = zeros(n_gcl, 5);
            
            for i = 1:n_gcl
                pref_id = find(spikes_per_stim(i,:) == (max(spikes_per_stim(i, :))));
                
                if ~isempty(pref_id)
                    if numel(pref_id)>1
                        pref_id = pref_id(1);
                    end
                    
                    p = spikes_per_stim(i, pref_id);
                    
                    if pref_id <=4
                        np_id = pref_id+4;
                    elseif pref_id > 4
                        np_id = pref_id-4;
                    end
                    
                    np = spikes_per_stim(i, np_id);
                    
                    ds_ind(i,1) = angls(pref_id);
                    ds_ind(i,2) = p;
                    ds_ind(i,3) = angls(np_id);
                    ds_ind(i,4) = np;
                    
                    if p ~= 0
                        ds_ind(i,5) = ((p-np)/(p+np)); %1-(np/p);
                    else
                        ds_ind(i,1:5) = NaN(1,5);
                    end
                    
                else
                    ds_ind(i,1) = NaN;
                    ds_ind(i,2) = NaN;
                    ds_ind(i,3) = NaN;
                    ds_ind(i,4) = NaN;
                    ds_ind(i,5) = NaN;
                end
                
                
            end
            
            
            %% REP 2  - - - -  continue below!
            
            ds_ind3 = ds_ind; % REP 2
            
            
            %% COMBINE the arrays of directions and spiking.
            % Find average
            
%             sp_pt = NaN(n_gcl, 2400);
%             sp_ps = NaN(n_gcl, 8);
%             
%             for cellid = 1:n_gcl
%                 sp_pt(cellid, :) = nanmean(vertcat(norm_spikes_per_time1(cellid, :), norm_spikes_per_time2(cellid, :),norm_spikes_per_time(cellid, :)));
%                 sp_ps(cellid, :) = nanmean(vertcat(norm_spikes_per_stim1(cellid,:), norm_spikes_per_stim2(cellid,:), norm_spikes_per_stim(cellid,:)));
%             end
%             
            
            sp_pt = NaN(n_gcl, 2400);
            sp_pt_raw = NaN(n_gcl, 2400);
            sp_ps = NaN(n_gcl, 8);
            sp_ps_raw = NaN(n_gcl, 8);
            
            for cellid = 1:n_gcl
                
                d1 = nanmean(vertcat(spikes_per_time1(cellid, :), spikes_per_time2(cellid, :) , spikes_per_time(cellid, :)));
                m_d1 = max(d1);
                sp_pt(cellid, :) = d1/m_d1;
                sp_pt_raw(cellid, :) = d1;
                
                d2 = nanmean(vertcat(spikes_per_stim1(cellid,:), spikes_per_stim2(cellid,:), spikes_per_stim(cellid,:)));
                m_d2 = max(d2);
                sp_ps(cellid, :)  = d2/m_d2;
                sp_ps_raw(cellid,:) = d2;
            end
            
            %% PLOT - REP1 and REP2 on top of each other for each cell:
            %
            
            %         for j = 1:n_gcl
            
%                         cellid = j;
%                         xvls = 0:5*60:40*60;
%                         angls = [0:45:315];
%                         thetavals = deg2rad(angls);
%             
%                         % % % PLOT MEAN SPIKES OVER 8 DIRECTIONS % % % %
%                         figure
%                         subplot(1,5,1:4)
%                         plot(smooth(norm_spikes_per_time1(cellid, :)), 'Color', [0.8 0.8 0.8]);
%                         hold on
%                         plot(smooth(norm_spikes_per_time(cellid, :)),'Color', [0.6 0.6 0.6]);
%                         plot(smooth(sp_pt(cellid, :)), 'k', 'LineWidth', 1.3)
%                         mv = max(smooth(sp_pt(cellid, :)));
%                         
%                         for i = 2:9
%                             plot([xvls(i) xvls(i)], [0 mv+0.1], 'r:', 'LineWidth', 1)
%                             hold on
%                         end
%                         xticks(2.5*60:5*60:37.5*60)
%                         xticklabels({angls})
%                         box off
%                         ax1 = gca;
%                         ax1.TickDir = 'out';
%             
%             
%                         % % % % POLAR PLOT % % % % %
%                         subplot(1,5,5)
%                         % REP 1
%                         rho = spikes_per_stim1(cellid,:);
%                         max_val = max(rho);
%                         rho2 = rho/max_val;
%                         thetavals(9) = thetavals(1);
%                         rho2(9) = rho2(1);
%                         polarplot(thetavals,rho2, 'Color', [0.8 0.8 0.8])
%                         % REP2
%                         hold on
%                         rho = spikes_per_stim(cellid,:);
%                         max_val = max(rho);
%                         rho2 = rho/max_val;
%                         thetavals(9) = thetavals(1);
%                         rho2(9) = rho2(1);
%                         polarplot(thetavals,rho2, 'Color', [0.6 0.6 0.6])
%                         % MEAN REp1 and REP 2
%             
%                         rho = sp_ps(cellid, :);
%                         max_val = max(rho);
%                         rho2 = rho/max_val;
%                         thetavals(9) = thetavals(1);
%                         rho2(9) = rho2(1);
%                         polarplot(thetavals,rho2, 'Color', 'k', 'LineWidth', 1.3)
%                         ax = gca;
%                         ax.RTickLabel = {''};
%                         ax.ThetaZeroLocation = 'top';
%                         ax.ThetaDir = 'clockwise';
%             
%                         sgtitle(string(cellid));
%             
%                         f= gcf;
%                         f.Position = [440   629 1085  169];
            %
            %         x = input('');
            %         close
            %         end
            %
            %% Make ds_ind for the COMBINED values. - mean across 2 reps.
            % Direction Selectivity Index
            
            % np = response to non-prefered (180 degrees from pref).
            % p = response to pref direction.
            
            ds_ind3 = zeros(n_gcl, 5);
            
            for i = 1:n_gcl
                pref_id = find(sp_ps(i,:) == (max(sp_ps(i, :))));
                
                if ~isempty(pref_id)
                    
                    if numel(pref_id)>1
                        pref_id = pref_id(1);
                    end
                    
                    p = sp_ps_raw(i, pref_id);
                    
                    if pref_id <=4
                        np_id = pref_id+4;
                    elseif pref_id > 4
                        np_id = pref_id-4;
                    end
                    
                    np = sp_ps_raw(i, np_id);
                    
                    ds_ind3(i,1) = angls(pref_id);
                    ds_ind3(i,2) = p;
                    ds_ind3(i,3) = angls(np_id);
                    ds_ind3(i,4) = np;
                    
                    if p ~= 0
                        ds_ind3(i,5) = ((p-np)/(p+np)); %1-(np/p);
                    else
                        ds_ind3(i,1:5) = NaN(1,5);
                    end
                    
                else
                    
                    ds_ind3(i,1) = NaN;
                    ds_ind3(i,2) = NaN;
                    ds_ind3(i,3) = NaN;
                    ds_ind3(i,4) = NaN;
                    ds_ind3(i,5) = NaN;
                end
                
            end
            
            
            
            %% COMBINE
            
            ds_ind = [dates, anis, tests, probe_depths, ds_ind3, ids_depth(:,2)]; % Also add depth for the cells.
            
            %% ANALYSE POPULATION LEVEL
            
            % Find cells that are more than 0.3 responsiveness and have a max firing rate of > 2 spikes.
            all_over3 = find(ds_ind(:,9)>0.3 & ds_ind(:,6)>1);
            all_not_lowf = find(ds_ind(:,6)>1);
            
            % Percentage of cells recorded that are direction selective
            DS = numel(all_over3)/n_gcl;
            DS_NOTLOW = numel(all_over3)/numel(all_not_lowf);
            
            % Mean level of selectivity of the DS cells.
            m_ds = mean(ds_ind(all_over3, 9));
            %
            % % Plot the distribution of DS of all cells
            % figure; histogram(ds_ind(:,9), 0:0.05:1); xlim([0 1]); box off; xlabel('DS Index'), ylabel('Number of Cells')
            %
            % % Plot the distribution of DS levels of the DS cells.
            % figure; histogram(ds_ind(all_over3,9), 0:0.05:1); xlim([0 1]); box off; xlabel('DS Index'), ylabel('Number of Cells')
            
            % Range of directions which DS cells are responsive to:
            [N, edges] = histcounts(ds_ind(all_over3,5), 0:45:360);
            %
            figure
            bar(N)
            xticks(1:1:8)
            xticklabels({0:45:315})
            box off
            xlabel('Direction (degrees)')
            ylabel('Number of Cells')
            ax=gca;
            ax.TickDir = 'out';
            
            % histogram(ds_ind(all_over3,5), 0:45:360)
            %% SAVE
            
            save(fullfile(save_path, strcat(string(date), '_', string(ani), '_', string(test), '_', string(probe_depth), '_GRATING.mat')), 'ds_ind','N', 'edges', 'DS', 'm_ds', 'ds_ind1', 'ds_ind2', 'sp_pt', 'sp_ps', 'sp_pt_raw', 'sp_ps_raw','spikes_per_stim', 'norm_spikes_per_stim', 'spikes_per_time', 'norm_spikes_per_time', 'ds_ind1', 'spikes_per_stim1', 'spikes_per_time1' ,'norm_spikes_per_stim1' ,'norm_spikes_per_time1', 'ds_ind2', 'ds_ind3', 'spikes_per_stim2', 'spikes_per_time2' ,'norm_spikes_per_stim2' ,'norm_spikes_per_time2', 'raster_data', 'raster_data1', 'raster_data2');
            
            %%
            clearvars -except recsp angls save_path files n_tot 
            close all
            
        end
        
        
    end
    
    
end

clear
%%
% xticks(x1:recsp:x2)
% xlb = 0:1:40;






